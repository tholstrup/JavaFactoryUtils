<?xml version="1.0" encoding="UTF-8"?><templates><template autoinsert="false" context="java" deleted="false" description="Creates a factory which takes parameters" enabled="true" name="factory (with params)">&#13;
/**&#13;
 * Factory for the ${InterfaceName} interface.&#13;
 */&#13;
public class ${InterfaceName}Factory extends BaseParameterizedFactory {&#13;
	private static ${InterfaceName}Factory factoryInstance = new ${InterfaceName}Factory();&#13;
	private static Logger log = Logger.getLogger(${InterfaceName}.class);&#13;
	private Class[] debugInvocationHandlers = new Class[] { TimingHandler.class };&#13;
	private Class[] traceInvocationHandlers = new Class[] { TimingHandler.class, EntryAndExitHandler.class };&#13;
&#13;
	/**&#13;
	 * Private constructor to prevent direct instanciation.&#13;
	 */&#13;
	private ${InterfaceName}Factory() {&#13;
	}&#13;
&#13;
	/**&#13;
	 * @return An instance of this factory.&#13;
	 */&#13;
	public static ${InterfaceName}Factory getFactoryInstance() {&#13;
		return factoryInstance;&#13;
	}&#13;
&#13;
	/**&#13;
	 * @return A concrete implementation of the ${InterfaceName} interface.&#13;
	 */&#13;
	public ${InterfaceName} getInstance(${params}) {&#13;
		return (${InterfaceName}) _getInstance(new Class[]{${paramTypes}} , new Object[]{${parameters}});&#13;
        //TODO create as many of these methods as necessary depending on the different creation method signatures.&#13;
	}&#13;
&#13;
    /**&#13;
     * @return True if a new instance should be created each time, false if caching should be used.&#13;
     */&#13;
	protected boolean getDefaultCreateNewInstanceEachTime() {&#13;
		return ${CreateNewInstanceEachTime};&#13;
	}&#13;
&#13;
    /**&#13;
     * @return The implementation class that should be created by the factory.&#13;
     */&#13;
	protected Class getDefaultImplementationClass() {&#13;
		return ${ImplementationName}.class;&#13;
	}&#13;
&#13;
	/**&#13;
	 * @return Classes which implement InvoactionHandler and have a constructor which takes Object as its only parameter (may be empty but cannot be null).&#13;
	 */&#13;
	protected Class[] getInvocationHandlers() {&#13;
		if (log.isTraceEnabled()) {&#13;
			return traceInvocationHandlers;&#13;
		} else if (log.isDebugEnabled()) {&#13;
			return debugInvocationHandlers;&#13;
		}&#13;
		return EMPTY_CLASS_ARRAY;&#13;
	}&#13;
}</template></templates>